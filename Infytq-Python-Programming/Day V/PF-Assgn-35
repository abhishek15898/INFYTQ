/*

A teacher is in the process of generating few reports based on the marks scored by the students of her class in a project based assessment.
Assume that the marks of her 10 students are available in a tuple. The marks are out of 25.


Write a python program to implement the following functions:

find_more_than_average(): Find and return the percentage of students who have scored more than the average mark of the class.
generate_frequency(): Find how many students have scored the same marks. For example, how many have scored 0, how many have scored 1, how many have scored 3â€¦.how many have scored 25. The result should be populated in a list and returned.
sort_marks(): Sort the marks in the increasing order from 0 to 25. The sorted values should be populated in a list and returned.

Sample Input	                                                              Expected Output
list_of_marks = (12,18,25,24,2,5,18,20,20,21)	                                  70.0 
                                  [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 2, 1, 0, 0, 1, 1]
                                        [2, 5, 12, 18, 18, 20, 20, 21, 24, 25]
*/

#PF-Assgn-35
#no_of_students=10
#Global variable
list_of_marks=(12,18,25,24,2,5,18,20,20,21)

def find_more_than_average():
    count=0
    mark_avg=sum(list_of_marks)/len(list_of_marks)
    for num in list_of_marks:
        if num>mark_avg:
            count+=1
    return (count/10)*100
    

def sort_marks():
    list_tuple=list(list_of_marks)
    list_tuple.sort()
    return list_tuple

def generate_frequency():
    frequency=[]
    for i in range(0,26):
        value=list_of_marks.count(i)
        frequency.append(value)
    return frequency

print(find_more_than_average())
print(generate_frequency())
print(sort_marks())
